
Para rodar um projeto executar o comando "npm install"

Baixar e instalar Dot Net Core:
https://dotnet.microsoft.com/download

Node.js é um interpretador, com código aberto, de código JavaScript de modo assíncrono e orientado a eventos, focado em migrar a programação do Javascript do lado do cliente para os servidores, criando assim aplicações de alta escalabilidade (como um servidor web[1]), capazes de manipular milhares de conexões/requisições simultâneas em tempo real, numa única máquina física.
=======
Node.js é um interpretador, com código aberto, de código JavaScript de modo assíncrono e orientado a eventos, focado em migrar a programação do Javascript do lado do cliente para 
os servidores, criando assim aplicações de alta escalabilidade (como um servidor web[1]), capazes de manipular milhares de conexões/requisições simultâneas em tempo real, 
numa única máquina física.



1 - Instalar nodejs
2 - Adicionar caminho nas variaveis de ambiente do windows npm -v
3 - Instalar typescript (npm install -g typescript) tsc -v
4 - Executar o comando "npm init -y" para gerar o package.json, alterar os parametros conforme instrução
5 - Criar arquivo tsconfig.json, alterar conforme instruções
6 - Executar comando "npm install" para instalar para gerar os modulos mencionados no arquivo package.json
7 - Criar arquivo "systemjs.config.js" que permite carregar módulos compilados usando o compilador TypeScript. Alterar conforme instrução.
Este arquivo faz o mapeamento para os arquivos dos pacotes e permite que compilador encontre os arquivo referenciados.

Instalar Angular Cli:
npm install -g @angular/cli
https://www.quora.com/How-do-I-install-a-previous-version-of-Angular-e-g-Angular-4


1 - Adicionar extensões:
C# for visual studio code
C# Extensions
Bracket Pair Colorizer
Material Icon Temas
Path Intellisense
Nuget Package Manager
Unity Tools
Git Lens
Git History

1.1-Angular
Angular Files
Angular Language Service
angular2-switcher
Auto Rename Tag
Debugger for Chrome
npm
Prettier - Code Formatter
TS Lint


Criar Projeto Web:

Criação de 3 projetos:
dotnet new web -n ProgAgil.WEB
dotnet new mvc -n ProgAgil.MVC
dotnet new webapi -n ProgAgil.API


ProgAgil.API:
Criar acesso a dados Entity:
Ir em Extensions, digitar @installed, encontrar Nuget Package, clicar "ctrl+shift+p", escrever nuget -> Microsoft.EntityFrameworkCore.Sqlite -> Instalar versão 2.2, isso será usado ao adicionar conexão "UseSqlite" no item 3. 
1-Criar pasta Model
2-Criar classe DbContext
3-Alterar a classe "Startup.cs" em ConfigureServices para adicionar a linha de conexão.
4-Adicionar DbSet em DataContext

Adicionar Migrations:
dotnet ef migrations add init
dotnet ef database update

Instalar Angular:
https://angular.io/guide/setup-local

Rodar angular:
ng serve

Iniciar um projeto Angular:
https://cli.angular.io/
Criar projeto ProAgil-App
Copiar conteúdo do .gitignore e colocar no arquivo .gitignore geral
Criar componente, botão direito em app -> generate component
Para realizar a chamada da WebAPI deve importar "HttpClientModule" em app.module.ts
Imprementar construtor com HttpClient em eventos.component.ts, importa o HttpClient

Resolvendo erro de CORS (referencia cruzada) na WebAPI:
Ir no arquivo "Startup.cs" 

Colocar bootstrap e layout Angular:
https://getbootstrap.com/docs/4.3/getting-started/download/
https://fontawesome.com/how-to-use/on-the-web/setup/using-package-managers
npm install --save-dev bootstrap@fortawesome/fontawesome-free
Após a instalação deverá ir em "styles.css" e realizar a importação dos arquivos

Inserir barra de navegação:
Ir no site do bootstrap em exemplos, selecionar modelo desejado, inspecionar e copiar elemento <nav>
Criar novo componente chamado nav
Colocar a referencia no app.component.html

Usando imagens na API:
Adicionar linha app.UseStaticFiles() no arquivo Startup.cs
Criar pasta wwwroot e colocar as imagens

Fazendo filtro de pesquisa funcionar com two way data binding (caixa de banana [()]):
Adicionar diretiva "caixa de banana" [(ngModel)]="filtroLista" dentro da div de consulta, obs: não funciona em form comum, só em div
Criar variavel "filtroLista" dentro de "eventos.components.ts"
Adicionar import de "FormsModule" em "app.module.ts" para que funcione a diretiva acima

Adicionar filtro grid ao digitar:
Criar encapsulamento de "_filtroLista" em eventos.component.ts, serve para não acessar a váriavel diretamente
  _filtroLista: string;
  get filtroLista(): string {
    return this._filtroLista;
  }
  set filtroLista(value: string) {
    this._filtroLista = value;
    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;
  }
Criar metodo "filtrarEventos" para tranformar itens em lowercase e retornar dados
Colocar esse metodo dentro do Get de filtroLista, caso exista na grid irá filtra, se não traz o que já existe
Em "eventos.component.ts" adicionar o eventosFiltrador no ngFor da GRID


Utilizando pipe "|" na grid:
evento.moeda | currency -> transforma os campos em tipo moeda


Trabalhando com camadas:
dotnet new classlib -n ProAgil.Domain
dotnet new classlib -n ProAgil.Repository
dotnet new sln -n ProAgil
Adicionar referencias:
dotnet add ProAgil.Repository/ProAgil.Repository.csproj reference ProAgil.Domain/ProAgil.Domain.csproj
dotnet add ProAgil.API/ProAgil.API.csproj reference ProAgil.Domain/ProAgil.Domain.csproj
dotnet add ProAgil.API/ProAgil.API.csproj reference ProAgil.Repository/ProAgil.Repository.csproj
Adicionar referencia a solução:
dotnet sln add ProAgil.API/ProAgil.API.csproj ProAgil.Repository/ProAgil.Repository.csproj ProAgil.Domain/ProAgil.Domain.csproj
Excluir bin e obj dos projetos (Repository, Domain, API)
Fazer "dotnet build"

Entidades:
Arrastar classe evento.cs de API para projeto Dominio
Criar as classes de Lote, Palestrante, PalestranteEvento, RedeSocial, atualizar a estrutura para manter o relacionamento da figura (Evento N x N Palestrante)

Repositório:
Mover a classe DbContext de API para o projeto Repository
Instalar EntityFrameworkCore no projeto Repository: "ctrl+shift+p" -> escrever nuget -> Microsoft.EntityFrameworkCore, fazer restore
Completar classe DbContext com as novas classes
Instalar Sqlite "Microsoft.EntityFrameworkCore.Sqlite" do mesmo modo que acima 
Criar migrations, referenciar "dotnet ef --startup-project ../ProAgil.API migrations add init" obs: não pode ser criado dentro da classlibrary
Criar banco de dados "dotnet ef --startup-project ../ProAgil.API database update"

Criar Interface para Repositório (Repository):
New interface "IProAgilRepository", a interface terá métodos genéricos
Criar classe e implementar a interface

Controllers Evento (Projeto API):
Em Startup.cs adicionar diretiva "services.AddScoped<IProAgilRepository, ProAgilRepository>();" isso significa que quando fizer uma injeção de dependencia 
e alguem precisar do IProAgilRepository irá utilizar o ProAgilRepository, não requisita o contexto direto.
Criar classe EventosController
Não esquecer de adicionar configuração de rota na Controller:
    [Route("api/[controller]")]
    [ApiController]
No projeto Domainm na classe Lote o atributo Evento deve ser readonly (só get), para não dar erro na inclusão, assim como os atributos similares nas outras classes, isso acontece porque Lote não tem Eventos e sim Evento tem Lotes.

Tracker e No Tracker:
Quando faz uma consulta com entity framework, ele trava o recurso até finalizar a transação.
No repositório quando retorna o mesmo tipo que está recebendo ex. IQueryable<Evento> = "Resultado do objeto Evento", na query onde é feito o orderby deve ser adicionado "AsNoTracking()"
Ou pode ser realizado de forma geral também, adicionando na injeção de dependencia do contexto:
_context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTraking;
https://docs.microsoft.com/en-us/ef/core/querying/tracking


Interface Models (Projeto APP):
Criar pasta _models
Criar interface "Evento", essas interfaces são para referencia

Injeção de serviço (Projeto App):
em app-> criar a pasta _services e criar dentro dessa pasta um serviço chamado evento
Esse serviço tem como finalidade a chamada do serviço da api para carregas as informações
Em eventos.component.ts, alterar o construtor para chamar o serviço que criamos acima. Alterar também o método getEvento desse componente
Os providers são importantes para injeção de dependencia, como por exemplo o serviço ser utilizado em outras partes do projeto (Aula 56)


Aula 56 - Observable (Projeto APP):
Em "evento.service.ts" getEvento():Observable<Evento> 
https://pt.stackoverflow.com/questions/207362/qual-%C3%A9-a-diferen%C3%A7a-entre-promises-e-observables/348771#348771
https://tableless.com.br/entendendo-rxjs-observable-com-angular/

Aula 57 - Ajustando icones e imagens (Projeto APP):
Utilizado para alterar icone na hora de ver ou ocultar imagem: <i class="{{mostrarImagem ? 'fa fa-eye-slash' : 'fa fa-eye'}}"></i>
Quando da problema no atributo length tem que iniciar variavel desse jeito: eventos: Evento[] = [];

Aula 58 - Criando filtro de datas pipe:
Em app criar nova pasta chamada "helps", dentro de helps clicar com botão direito e em "generate pipe"
em .pipe.ts usar o "super" para extender de DatePipe
Criar pasta util e gerar uma classe de formatação de data, nessa classe criar as propriedade readonly com formato de data
Em app.module declarar o pipe de date criado, não esquecer de adicionar o provider "EventoService" em providers

Aula 59 - NGX Bootstrap (Projeto APP):
Serve para trabalhar com itens como se fosse JQuery (modal, dropdown, tooltip)
https://valor-software.com/ngx-bootstrap
npm install ngx-bootstrap --save
Em app.module adicionar os imports e as referencias no site é possivel ver o que tem que ser importado ex.: TooltipModule.forRoot()

Aula 60 - Botoes e tooltips (Projeto APP):
No html -> <button class="btn btn-sm btn-success" tooltip="Editar">

Aula 61 - Modal (Projeto APP):
Criar estrutura do modal no Html
No component.ts alterar o construtor para herdar de BsModalService-> private modalService: BsModalService
Criar função openModal responsável por abrir o Modal
No evento click da grid-> (click)="openModal(template)"

Aula 62 - Dropdown navbar (Projeto APP):
Adicionar estrutura do navbar em nav.component.html

Aula 64 - Criando formulário (Projeto APP):
Criar o formulário em evento.component.html
Em evento.component.ts criar referencia-> registerForm: FormGroup; Criar metodo de validation e salvarAlteracao
Input formulario html referenciando campo: <input type="text" class="form-control" formControlName="imagemURL">
Adicionar em app.module -> imports-> ReactiveFormsModule

Aula 65, 66, 67 - Validação de Forms [formGroup]="registerForm" (Projeto APP):
No método validation em evento.component.ts, adicionar os validadores
No form adicionar [ngClass]para validar se existe erro quando clicado no campo 
[ngClass]="{'is-invalid': registerForm.get('tema').errors && registerForm.get('tema').touched}"
Adicionado [ngIf] que verifica qual tipo de erro está ocorrendo 
*ngIf="registerForm.get('tema').hasError('required') && registerForm.get('tema').touched"

Aula 68 - FormBuilder Service
Adicionar no construtor FormBuilder
É utilizado no método validation, para não ter que instanciar FormControl em toda validação. 

Aula 69 - DatePicker ngx-bootstrap:
Em app.module.ts importar-> BsDatepickerModule.forRoot(), | O forRoot indica que pode ser usado em todo projeto
Em style.css importar-> @import '../node_modules/ngx-bootstrap/datepicker/bs-datepicker.css';
Em evento.component.ts adicionar os imports para conversão de data -> import { defineLocale, BsLocaleService, ptBrLocale } from 'ngx-bootstrap';
Em evento.component.ts alterar construtor para adicionar locale e configurações
Em app.module.ts realizar o import-> BrowserAnimationsModule

Aula 71 - Registrando Evento:
Em evento.component.html -> (click)="salvarAlteracao(template)"
Em evento.component.ts implementar o metodo "salvarAlteracao", como ele é observable é necessário utilizar o subscribe.

Aula 72 - Editando Evento:
Em evento.component.ts criar os metodos de editarevento e novoevento
Primeiro deve ser carregado evento na tela

Aula 80  - Configuração muitos para muitos (WebAPI)
ThenInclude é utilizado em referencia muitos para muitos, primeiro usa include e pega a tabela intermediaria depois o theninclude na tabela destino no repository
Em AutoMapperProfiles.cs -> No CreateMap utilizar ForMember MapFrom para informar que é muitos para muitos e fazer o relacionamento

Aula 81 - DTO na controller
Em EventoController colocar IMapper como parametro
Alterar metodos para fazer o mapeamento

Aula 82 - Controller DTO reverso





{{}}->Interpolação

github
github.com/vsandrade/
https://github.com/vsandrade/ProAgil

Atalhos:
ctrl+d -> Selecionar mais de uma ocorrencia similar para edição
shift + alst + ctrl -> é possivel mover o cursor entre as linhas sem selecionar
ctrl+shift+p-> escrever reindent lines para identar linhas html

Duvidas e anotações:
O que é injeção de dependencia?
Não esquecer de passar o validation no onInitit do projeto-> this.validation();
Para inserir usa post e para editar put
ThenInclude é utilizado em referencia muitos para muitos


Template string:
`${this.baseURL}/getByTema/${tema}`



Postman:
renan.cont20@yahoo.com.br
repostman21
Postman@2019


URLs:
https://valor-software.com/ngx-bootstrap